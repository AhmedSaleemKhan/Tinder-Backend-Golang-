// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: favourite.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addFavourite = `-- name: AddFavourite :one
INSERT INTO favourites (
  fav_id,
  user_id,
  target_id
) VALUES (
  $1, $2, $3
) RETURNING fav_id, user_id, target_id, fav_at
`

type AddFavouriteParams struct {
	FavID    uuid.UUID `json:"fav_id"`
	UserID   string    `json:"user_id"`
	TargetID string    `json:"target_id"`
}

func (q *Queries) AddFavourite(ctx context.Context, arg AddFavouriteParams) (Favourite, error) {
	row := q.db.QueryRowContext(ctx, addFavourite, arg.FavID, arg.UserID, arg.TargetID)
	var i Favourite
	err := row.Scan(
		&i.FavID,
		&i.UserID,
		&i.TargetID,
		&i.FavAt,
	)
	return i, err
}

const favoritesMetadata = `-- name: FavoritesMetadata :one
SELECT 
	count(*)
FROM 
	accounts
	INNER JOIN favourites ON accounts.id = $1
`

func (q *Queries) FavoritesMetadata(ctx context.Context, id string) (int64, error) {
	row := q.db.QueryRowContext(ctx, favoritesMetadata, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllFavourites = `-- name: GetAllFavourites :many
SELECT 
	AC.id, 
	AC.first_name, 
	AC.birth_date,
	FAV.fav_id
FROM 
	accounts AS AC
	INNER JOIN favourites AS FAV ON AC.id = $1
ORDER BY
    Fav.fav_at DESC
LIMIT $2
OFFSET $3
`

type GetAllFavouritesParams struct {
	ID     string `json:"id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type GetAllFavouritesRow struct {
	ID        string    `json:"id"`
	FirstName string    `json:"first_name"`
	BirthDate int64     `json:"birth_date"`
	FavID     uuid.UUID `json:"fav_id"`
}

func (q *Queries) GetAllFavourites(ctx context.Context, arg GetAllFavouritesParams) ([]GetAllFavouritesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllFavourites, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllFavouritesRow{}
	for rows.Next() {
		var i GetAllFavouritesRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.BirthDate,
			&i.FavID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFavorite = `-- name: GetFavorite :one
SELECT true From favourites
WHERE target_id = $1 AND user_id = $2
`

type GetFavoriteParams struct {
	TargetID string `json:"target_id"`
	UserID   string `json:"user_id"`
}

func (q *Queries) GetFavorite(ctx context.Context, arg GetFavoriteParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, getFavorite, arg.TargetID, arg.UserID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}
