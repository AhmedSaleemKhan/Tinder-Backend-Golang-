// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package db

// import (
// 	"context"
// 	"database/sql"
// 	"encoding/json"

// 	"github.com/lib/pq"
// 	"github.com/tabbed/pqtype"
// )

// const checkUserExists = `-- name: CheckUserExists :one
// SELECT id, first_name, last_name, email, phone, age, gender, ethnicity, nsfw, metadata, created_at FROM users
// WHERE phone =$1 or email = $2 LIMIT 1
// `

// type CheckUserExistsParams struct {
// 	Phone string `json:"phone"`
// 	Email string `json:"email"`
// }

// func (q *Queries) CheckUserExists(ctx context.Context, arg CheckUserExistsParams) (User, error) {
// 	row := q.db.QueryRowContext(ctx, checkUserExists, arg.Phone, arg.Email)
// 	var i User
// 	err := row.Scan(
// 		&i.ID,
// 		&i.FirstName,
// 		&i.LastName,
// 		&i.Email,
// 		&i.Phone,
// 		&i.Age,
// 		&i.Gender,
// 		pq.Array(&i.Ethnicity),
// 		&i.Nsfw,
// 		&i.Metadata,
// 		&i.CreatedAt,
// 	)
// 	return i, err
// }

// const createUser = `-- name: CreateUser :one
// INSERT INTO users (
//   id,
//   first_name,
//   last_name,
//   email,
//   phone,
//   age,
//   gender,
//   ethnicity,
//   nsfw,
//   metadata
// ) VALUES (
//   $1, $2, $3, $4, $5, $6, $7, $8, $9, $10 
// ) RETURNING id, first_name, last_name, email, phone, age, gender, ethnicity, nsfw, metadata, created_at
// `

// type CreateUserParams struct {
// 	ID        string          `json:"id"`
// 	FirstName string          `json:"first_name"`
// 	LastName  string          `json:"last_name"`
// 	Email     string          `json:"email"`
// 	Phone     string          `json:"phone"`
// 	Age       int64           `json:"age"`
// 	Gender    string          `json:"gender"`
// 	Ethnicity []string        `json:"ethnicity"`
// 	Nsfw      bool            `json:"nsfw"`
// 	Metadata  json.RawMessage `json:"metadata"`
// }

// func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
// 	row := q.db.QueryRowContext(ctx, createUser,
// 		arg.ID,
// 		arg.FirstName,
// 		arg.LastName,
// 		arg.Email,
// 		arg.Phone,
// 		arg.Age,
// 		arg.Gender,
// 		pq.Array(arg.Ethnicity),
// 		arg.Nsfw,
// 		arg.Metadata,
// 	)
// 	var i User
// 	err := row.Scan(
// 		&i.ID,
// 		&i.FirstName,
// 		&i.LastName,
// 		&i.Email,
// 		&i.Phone,
// 		&i.Age,
// 		&i.Gender,
// 		pq.Array(&i.Ethnicity),
// 		&i.Nsfw,
// 		&i.Metadata,
// 		&i.CreatedAt,
// 	)
// 	return i, err
// }

// const getUser = `-- name: GetUser :one
// SELECT id, first_name, last_name, email, phone, age, gender, ethnicity, nsfw, metadata, created_at FROM users
// WHERE id = $1 LIMIT 1
// `

// func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
// 	row := q.db.QueryRowContext(ctx, getUser, id)
// 	var i User
// 	err := row.Scan(
// 		&i.ID,
// 		&i.FirstName,
// 		&i.LastName,
// 		&i.Email,
// 		&i.Phone,
// 		&i.Age,
// 		&i.Gender,
// 		pq.Array(&i.Ethnicity),
// 		&i.Nsfw,
// 		&i.Metadata,
// 		&i.CreatedAt,
// 	)
// 	return i, err
// }

// const updateUser = `-- name: UpdateUser :one
// UPDATE users
// SET
//   first_name = COALESCE($1,first_name),
//   last_name = COALESCE($2,last_name),
//   email = COALESCE($3,email),
//   phone = COALESCE($4,phone),
//   age = COALESCE($5,age),
//   gender = COALESCE($6,gender),
//   ethnicity = COALESCE($7,ethnicity),
//   nsfw = COALESCE($8,nsfw),
//   metadata = COALESCE($9,metadata)
// WHERE
//   id = $10
// RETURNING id, first_name, last_name, email, phone, age, gender, ethnicity, nsfw, metadata, created_at
// `

// type UpdateUserParams struct {
// 	FirstName sql.NullString        `json:"first_name"`
// 	LastName  sql.NullString        `json:"last_name"`
// 	Email     sql.NullString        `json:"email"`
// 	Phone     sql.NullString        `json:"phone"`
// 	Age       sql.NullInt64         `json:"age"`
// 	Gender    sql.NullString        `json:"gender"`
// 	Ethnicity []string              `json:"ethnicity"`
// 	Nsfw      sql.NullBool          `json:"nsfw"`
// 	Metadata  pqtype.NullRawMessage `json:"metadata"`
// 	ID        string                `json:"id"`
// }

// func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
// 	row := q.db.QueryRowContext(ctx, updateUser,
// 		arg.FirstName,
// 		arg.LastName,
// 		arg.Email,
// 		arg.Phone,
// 		arg.Age,
// 		arg.Gender,
// 		pq.Array(arg.Ethnicity),
// 		arg.Nsfw,
// 		arg.Metadata,
// 		arg.ID,
// 	)
// 	var i User
// 	err := row.Scan(
// 		&i.ID,
// 		&i.FirstName,
// 		&i.LastName,
// 		&i.Email,
// 		&i.Phone,
// 		&i.Age,
// 		&i.Gender,
// 		pq.Array(&i.Ethnicity),
// 		&i.Nsfw,
// 		&i.Metadata,
// 		&i.CreatedAt,
// 	)
// 	return i, err
// }
