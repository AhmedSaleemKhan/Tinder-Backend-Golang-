// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: account.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const addAccountPictures = `-- name: AddAccountPictures :one
UPDATE accounts
SET 
picture = $2
WHERE id = $1
RETURNING picture
`

type AddAccountPicturesParams struct {
	ID      string   `json:"id"`
	Picture []string `json:"picture"`
}

func (q *Queries) AddAccountPictures(ctx context.Context, arg AddAccountPicturesParams) ([]string, error) {
	row := q.db.QueryRowContext(ctx, addAccountPictures, arg.ID, pq.Array(arg.Picture))
	var picture []string
	err := row.Scan(pq.Array(&picture))
	return picture, err
}

const checkAccountExists = `-- name: CheckAccountExists :one
SELECT id, first_name, email, phone, birth_date, gender, show_me, university, nsfw, ethnicity, interests, picture, verify_yourself, about_me, time_zone, created_at FROM accounts
WHERE phone =$1 or email = $2 LIMIT 1
`

type CheckAccountExistsParams struct {
	Phone string `json:"phone"`
	Email string `json:"email"`
}

func (q *Queries) CheckAccountExists(ctx context.Context, arg CheckAccountExistsParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, checkAccountExists, arg.Phone, arg.Email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.Email,
		&i.Phone,
		&i.BirthDate,
		&i.Gender,
		&i.ShowMe,
		&i.University,
		&i.Nsfw,
		&i.Ethnicity,
		pq.Array(&i.Interests),
		pq.Array(&i.Picture),
		&i.VerifyYourself,
		&i.AboutMe,
		&i.TimeZone,
		&i.CreatedAt,
	)
	return i, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  id,
  first_name,
  email,
  phone,
  birth_date,
  gender,
  show_me,
  university,
  nsfw,
  ethnicity,
  interests
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, first_name, email, phone, birth_date, gender, show_me, university, nsfw, ethnicity, interests, picture, verify_yourself, about_me, time_zone, created_at
`

type CreateAccountParams struct {
	ID         string         `json:"id"`
	FirstName  string         `json:"first_name"`
	Email      string         `json:"email"`
	Phone      string         `json:"phone"`
	BirthDate  int64          `json:"birth_date"`
	Gender     string         `json:"gender"`
	ShowMe     string         `json:"show_me"`
	University sql.NullString `json:"university"`
	Nsfw       bool           `json:"nsfw"`
	Ethnicity  string         `json:"ethnicity"`
	Interests  []string       `json:"interests"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.ID,
		arg.FirstName,
		arg.Email,
		arg.Phone,
		arg.BirthDate,
		arg.Gender,
		arg.ShowMe,
		arg.University,
		arg.Nsfw,
		arg.Ethnicity,
		pq.Array(arg.Interests),
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.Email,
		&i.Phone,
		&i.BirthDate,
		&i.Gender,
		&i.ShowMe,
		&i.University,
		&i.Nsfw,
		&i.Ethnicity,
		pq.Array(&i.Interests),
		pq.Array(&i.Picture),
		&i.VerifyYourself,
		&i.AboutMe,
		&i.TimeZone,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :one
DELETE FROM accounts WHERE id = $1 RETURNING id
`

func (q *Queries) DeleteAccount(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, deleteAccount, id)
	err := row.Scan(&id)
	return id, err
}

const discoverAccountsWithFilter = `-- name: DiscoverAccountsWithFilter :many
SELECT
  id,
  first_name,
  birth_date,
  picture
FROM accounts 
WHERE gender = $1 
    AND ethnicity = $2 
    AND birth_date <= $3
    AND birth_date >= $4
LIMIT $5
OFFSET $6
`

type DiscoverAccountsWithFilterParams struct {
	Gender      string `json:"gender"`
	Ethnicity   string `json:"ethnicity"`
	BirthDate   int64  `json:"birth_date"`
	BirthDate_2 int64  `json:"birth_date_2"`
	Limit       int32  `json:"limit"`
	Offset      int32  `json:"offset"`
}

type DiscoverAccountsWithFilterRow struct {
	ID        string   `json:"id"`
	FirstName string   `json:"first_name"`
	BirthDate int64    `json:"birth_date"`
	Picture   []string `json:"picture"`
}

func (q *Queries) DiscoverAccountsWithFilter(ctx context.Context, arg DiscoverAccountsWithFilterParams) ([]DiscoverAccountsWithFilterRow, error) {
	rows, err := q.db.QueryContext(ctx, discoverAccountsWithFilter,
		arg.Gender,
		arg.Ethnicity,
		arg.BirthDate,
		arg.BirthDate_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DiscoverAccountsWithFilterRow{}
	for rows.Next() {
		var i DiscoverAccountsWithFilterRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.BirthDate,
			pq.Array(&i.Picture),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const discoverdAccountsMetadata = `-- name: DiscoverdAccountsMetadata :one
SELECT 
	count(*)
FROM 
	accounts
WHERE gender = $1 
    AND ethnicity = $2 
    AND birth_date <= $3
    AND birth_date >= $4
`

type DiscoverdAccountsMetadataParams struct {
	Gender      string `json:"gender"`
	Ethnicity   string `json:"ethnicity"`
	BirthDate   int64  `json:"birth_date"`
	BirthDate_2 int64  `json:"birth_date_2"`
}

func (q *Queries) DiscoverdAccountsMetadata(ctx context.Context, arg DiscoverdAccountsMetadataParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, discoverdAccountsMetadata,
		arg.Gender,
		arg.Ethnicity,
		arg.BirthDate,
		arg.BirthDate_2,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, first_name, email, phone, birth_date, gender, show_me, university, nsfw, ethnicity, interests, picture, verify_yourself, about_me, time_zone, created_at FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.Email,
		&i.Phone,
		&i.BirthDate,
		&i.Gender,
		&i.ShowMe,
		&i.University,
		&i.Nsfw,
		&i.Ethnicity,
		pq.Array(&i.Interests),
		pq.Array(&i.Picture),
		&i.VerifyYourself,
		&i.AboutMe,
		&i.TimeZone,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountPictures = `-- name: GetAccountPictures :one
SELECT picture FROM accounts WHERE id=$1
`

func (q *Queries) GetAccountPictures(ctx context.Context, id string) ([]string, error) {
	row := q.db.QueryRowContext(ctx, getAccountPictures, id)
	var picture []string
	err := row.Scan(pq.Array(&picture))
	return picture, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET
  verify_yourself = COALESCE($1,verify_yourself),
  about_me = COALESCE($2,about_me),
  interests = COALESCE($3,interests),
  gender = COALESCE($4,gender),
  time_zone = COALESCE($5,time_zone),
  ethnicity = COALESCE($6,ethnicity),
  nsfw = COALESCE($7,nsfw),
  picture = COALESCE($8,picture)
WHERE
  id = $9
RETURNING id, first_name, email, phone, birth_date, gender, show_me, university, nsfw, ethnicity, interests, picture, verify_yourself, about_me, time_zone, created_at
`

type UpdateAccountParams struct {
	VerifyYourself sql.NullBool   `json:"verify_yourself"`
	AboutMe        sql.NullString `json:"about_me"`
	Interests      []string       `json:"interests"`
	Gender         sql.NullString `json:"gender"`
	TimeZone       sql.NullString `json:"time_zone"`
	Ethnicity      sql.NullString `json:"ethnicity"`
	Nsfw           sql.NullBool   `json:"nsfw"`
	Picture        []string       `json:"picture"`
	ID             string         `json:"id"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount,
		arg.VerifyYourself,
		arg.AboutMe,
		pq.Array(arg.Interests),
		arg.Gender,
		arg.TimeZone,
		arg.Ethnicity,
		arg.Nsfw,
		pq.Array(arg.Picture),
		arg.ID,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.Email,
		&i.Phone,
		&i.BirthDate,
		&i.Gender,
		&i.ShowMe,
		&i.University,
		&i.Nsfw,
		&i.Ethnicity,
		pq.Array(&i.Interests),
		pq.Array(&i.Picture),
		&i.VerifyYourself,
		&i.AboutMe,
		&i.TimeZone,
		&i.CreatedAt,
	)
	return i, err
}
