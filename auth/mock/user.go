// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/techschool/simplebank/auth (interfaces: AuthImpl)

// Package mockauth is a generated GoMock package.
package mockauth

import (
	reflect "reflect"

	auth "firebase.google.com/go/v4/auth"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthImpl is a mock of AuthImpl interface.
type MockAuthImpl struct {
	ctrl     *gomock.Controller
	recorder *MockAuthImplMockRecorder
}

// MockAuthImplMockRecorder is the mock recorder for MockAuthImpl.
type MockAuthImplMockRecorder struct {
	mock *MockAuthImpl
}

// NewMockAuthImpl creates a new mock instance.
func NewMockAuthImpl(ctrl *gomock.Controller) *MockAuthImpl {
	mock := &MockAuthImpl{ctrl: ctrl}
	mock.recorder = &MockAuthImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthImpl) EXPECT() *MockAuthImplMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthImpl) CreateUser(arg0 *gin.Context, arg1 *auth.UserToCreate) (*auth.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*auth.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthImplMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthImpl)(nil).CreateUser), arg0, arg1)
}

// VerifyIDToken mocks base method.
func (m *MockAuthImpl) VerifyIDToken(arg0 string) (*auth.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyIDToken", arg0)
	ret0, _ := ret[0].(*auth.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyIDToken indicates an expected call of VerifyIDToken.
func (mr *MockAuthImplMockRecorder) VerifyIDToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyIDToken", reflect.TypeOf((*MockAuthImpl)(nil).VerifyIDToken), arg0)
}
